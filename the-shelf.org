#+TITLE:The Shelf
#+SUBTITLE: A simple approach to structured embedded software
#+AUTHOR: Leonardo Celente
* Objective
  Have a set of modular - and so maybe less efficient - software modules for use with
  hardware. Those are divided in categories that specify an expected interface and
  behavior
* Categories
** Driver
*** Summary
    This is the workhorse. Most of the code written is an low-level C code that
    communicates with an specific hardware module, be it a sensor or actuators.
    Being, probably, the biggest, this category is sub-divided in subcategories.
    These are designed as _applications_. Not to be a fixed set, but to grow as
    more applications are encountered. Here are some starting examples:
     - IMU
     - Motor
     - Temperature S.
     - Encoder
     - Power S.
*** Considerations
    As the document title suggests, these are not tailor-made drivers, they aren't
    supposed to fit every requirement of every project. Instead of the focus on
    performance, the main goal is ease-of-use. These are meant to be general,
    and as straightforward to use as possible. So each _application_ should define
    a set of minimal expectations, this means that features may be discarded as too
    specific.

   *This is to be expected*, there will be *no* mitigation. If your application is
    not served by the minimal driver it *will not* be part of The Shelf. It is a
    on off driver, that can (and probably will) be based on the shelf driver. But
    there should be no effort to keep it compatible, the author of said driver is
    completely free to do what it takes to fill the project requirements.
*** Technical Details
    Again, these are general drivers, so there are some limitations on what will be
    expected of them.
**** Blocking
     If your application needs the use of interrupts or DMA, it will need to be
     thought out with the whole system in mind, they wont be general. This does
     not mean that the driver wont help, it is *strongly* advised that, data
     transactions an transformations be separated, so that one can more easily
     insert the core driver functionality in an asynchronous context.
**** Platform Independent
     By this I mean that the code will not depend on platform specific code
     such as the STM32 HAL or Arduino Framework, there should be a file, not
     so aptly named BSP, that should wrap platform specific code in a common
     abstraction.
     - Written in C
**** Written in C/C++
     The driver must be written in C, however, it is encouraged that the
     application be defined as an C++ Class, so that higher level code can
     make use of OOP advantages.
** Interface
*** Summary
    This adapts the various methods of sending bytes between *micro-controllers*.
    This could be the trickiest one to get right. In /in theory/ this has to
    abstract away details of protocols such as CAN, LoRa, Ethernet and Bluetooth.
    Its intention is to serve as sinks of data for common applications.
*** Considerations
    This will not be as generic as the drivers, it will require that functions
    be called at, for example, certain interrupts. I wont lie, the main focus is
    on radios and CAN, the rest is mostly an afterthought. The key concepts that
    should be defined are of a _packet_, and of _handlers_.
**** Packet
     This is self-explanatory, this is a general bag of bytes. However, things get
     interesting once we require that data may be *broken* in packets, and so, these
     packets have to be *reassembled* in order to reconstruct the data, and handle
     cases of missing packets. But what happens if you simply add all this protocol
     abstraction on top of something like LoRa or even CAN, you start to accumulate
     losses. So it is the challenge to adapt these common requirements to each
     base protocol.
**** Handlers
     These are simply the hooks for arriving and outgoing packets. Function pointers
     simply.
*** Technical Details
    There will be two layers to this. The low-level drivers, that should follow
    the same philosophy as Shelf Drivers, with the obvious exception that they
    will not be Blocking, but have a clear interface to the underlying interrupts.
    They should do no more than allow the user to manage specific events
** Storage
*** Summary
    This is also a sink of data. But, the abstraction is not as broad as an [[Interface]].
    Storage covers mostly what you expect, a common abstraction layer for Mass Storage,
    Micro-SD Cards, Banks of EEPROMs, eMMC. The differentiating factor to [[Interface]] is
    the retrieval of previous information and self organizing.  


  
